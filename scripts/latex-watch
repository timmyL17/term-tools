#!/usr/bin/env python2.7
#
# latex-watch
# Sean Bell 2012
#
# Dependencies:
#    latexmk
#    rubber        (recommended)
#    inotify-tools (recommended)
#

import os
import sys
import time
import glob
import signal
import subprocess


def print_err(s):
    """ Print bold red message """
    print '\033[1;31m%s\033[m' % s


def print_msg(s):
    """ Print yellow message """
    print '\033[33m%s\033[m' % s


def is_ubuntu():
    return "Ubuntu" in os.popen("uname -a").read()


def is_mac():
    return "Darwin" in os.popen("uname -a").read()


def is_cmd(cmd):
    """ Returns true if the command is available to the shell """
    return os.system("command -v %s >/dev/null 2>&1" % cmd.split()[0]) == 0


def ensure_cmds(commands):
    """ Makes sure that the given commands are available """
    for cmd in commands:
        if not is_cmd(cmd):
            print_err("Error: could not find %s" % cmd)
            for inst in ['apt-get', 'port', 'brew']:
                if is_cmd(inst):
                    print_err("  --> run '%s install %s'" % (
                        'brew' if inst == 'brew' else 'sudo ' + inst, cmd))
                    break
            exit(1)


def get_dependencies(path):
    """ Returns a set of dependencies """
    deps = set()
    output = os.popen("latexmk -pdf -pdflatex='pdflatex -interaction=nonstopmode' -deps %s 2>/dev/null" % path).read()
    for f in output.replace('\\\n', ' ').split():
        if os.path.isfile(f):
            deps.add(f)
    return deps


def get_compiler():
    """ Returns a function that compiles a list of files """
    if is_cmd("rubber"):
        return lambda x: 0 == os.system("rubber --pdf %s" % ' '.join(x))
        print_msg('Compiler: rubber')
    elif is_cmd("latexmk"):
        return lambda x: 0 == os.system("latexmk -pdf -pdflatex='pdflatex "
                                        "-interaction=nonstopmode' -use-make %s" % ' '.join(x))
        print_msg('Compiler: latexmk')
    else:
        print_err("Error: no LaTeX make-style compiler")
        if is_ubuntu():
            print_err("Suggested: install rubber with 'sudo apt-get install rubber'")
        elif is_mac():
            print_err(
                "Suggested: install rubber with 'sudo port install rubber'")
        exit(1)


def get_watcher():
    """ Returns a function to watch a list of files """
    try:
        if (is_cmd("inotifywait") and
            not subprocess.check_output(["inotifywait"]).startswith("Couldn't initialize inotify")):

            print_msg("Watch: inotifywait")
            return lambda x: os.popen("inotifywait -e modify %s" % ' '.join(x))
    except subprocess.CalledProcessError:
        print_msg("Error with inotifywait installation")
        pass

    # fallback
    print_msg("Watch: sleep(1) loop")
    if is_ubuntu():
        print_err("Suggested: install inotifywait with "
                    "'sudo apt-get install inotify-tools'")

    def watch(paths):
        files = [File(p) for p in paths]
        while True:
            for f in files:
                if f.changed():
                    return
            time.sleep(1)
    return watch


def get_view_cmd():
    """ Returns a command to view a pdf """
    for cmd in ("evince", "gnome-open", "gvfs-open", "xdg-open", "open -g", "acroread", "xpdf"):
        if is_cmd(cmd):
            print_msg('Viewer: %s' % cmd)
            return cmd
    else:
        print_err("Error: could not find PDF viewer")
        exit(1)


class File:
    """ Helper for watching files """
    def __init__(self, path):
        self._path = path
        self._mtime = os.path.getmtime(self._path)

    def changed(self):
        """ Returns true if the file has changed since the last call """
        new_mtime = os.path.getmtime(self._path)
        if new_mtime != self._mtime:
            self._mtime = new_mtime
            return True
        return False

if __name__ == '__main__':
    # fix ctrl+c issues
    signal.signal(signal.SIGINT, lambda x, y: exit(1))

    # make sure we have latexmk and rubber
    ensure_cmds(['latexmk', 'rubber'])

    # parse arguments
    arglist = (sys.argv[1:] if len(sys.argv) > 1 else glob.glob('*.tex'))
    sources = list(set([os.path.splitext(f)[0] + '.tex' for f in arglist]))
    pdfs = [os.path.splitext(f)[0] + '.pdf' for f in sources]
    print_msg('Sources: %s' % sources)

    if len(sources) < 1:
        print_err('\nUsage: %s <file1.tex> [<file2.tex> ...]' % sys.argv[0])
        print_msg(
            'Note: if there is only one .tex file, you can omit the argument')
        exit(1)

    # find commands to use
    make = get_compiler()
    view_cmd = get_view_cmd()
    watch = get_watcher()
    ubuntu = is_ubuntu()

    # go!
    viewed = False
    print ''
    while True:
        make(sources)

        # view pdfs
        if not viewed or view_cmd != 'evince':
            viewed = True
            for f in pdfs:
                if os.system("%s \"%s\" &" % (view_cmd, f)) != 0:
                    viewed = False

        # compute dependencies
        deps = set()
        for f in sources:
            deps.update(get_dependencies(f))
        watch(list(deps))

    print_err('Exiting')
