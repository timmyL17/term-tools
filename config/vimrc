" VIMRC
"
" Read the various sections to see all the command mappings.
" Many (but not all) of the plugins have mini-documentation
" where they are configured.
"

" Must be first since this sets some options as a side effect
set nocompatible

" Pathogen : plugin package manager {{{
filetype off
call pathogen#infect()
call pathogen#helptags()
filetype plugin indent on
" }}}

" Global config {{{

" Dark mode unless there is a flag file
" (useful for when you toggle modes often)
if filereadable($HOME . "/.vim-light")
	set background=light
else
	set background=dark
endif

" Color scheme -- Solarized, toggle with F6
set t_Co=16
syntax on
colorscheme solarized
call togglebg#map("<F6>")

" Misc
let is_bash=1          " we are using bash
set encoding=utf-8     " use UTF-8 (default latin1)
set termencoding=utf-8
set autoread           " auto-reload modified files (with no local changes)
set undolevels=65536   " lots of undo (default 1000)
set history=1024       " lots of history (default 20)
"set mouse=nicr            " enable mouse (set mouse= to disable mouse)
set mouse=
set foldmethod=syntax  " fold using syntax by default
"set foldminlines=4     " require a medium size to fold
set foldnestmax=6      " max 6 fold levels for syntax/indent folding
"set hidden             " allow un-saved buffers in background
set lazyredraw         " no redraws in macros
set confirm            " dialog when :q, :w, :x, :wq fails
set title              " change terminal title
set nostartofline      " don't move cursor when switching buffers/files
set nobackup           " that's what git is for
set ttyfast            " smoother changes

if has('unnamedplus')
	set clipboard=unnamedplus  " Share X windows clipboard.
endif

" Appearance
set number             " enable line numbers
set scrolloff=8        " keep 8 lines below and above cursor
set linebreak          " show wrap at word boundaries
set showbreak=\ ↪\     " prefix wrap with ↪

" Autocompletion
"set wildmenu                 " completion with menu
"set wildmode=list:longest    " list instead of fill in options
set wildignore=*~,*.o,*.d,*.obj,*.class,*.pyc,*.bak,*.swp,.svn,.git
set suffixes=~,.o,.d,.obj,.class,.bak,.swp,.pyc
set completeopt=longest,menuone

" Indentation -- width of 4 spaces
set autoindent     " automatic indentation
set copyindent     " indent new lines by current indent
set nosmartindent  " disable C-style indenting by default (only useful for C/C++)
set tabstop=4      " Number of spaces that a <Tab> in the file counts for (default 8)
set shiftwidth=4   " Number of spaces to use for each step of (auto)indent.
set textwidth=0    " no hard wrapping by default
set expandtab      " use spaces instead of tabs

" Better search
set incsearch      " incremental search
set ignorecase     " ignore case in search
set smartcase      " override ignorecase if uppercase is used in search string
set hlsearch       " enable search highlighting (change to nohlsearch to disable)
                   " clear highlight with :noh

" Show more things
set cursorline     " highlight current line
set showmode       " show which mode we are in
set showcmd        " show state of keyboard input
set showmatch      " show brace match
set matchtime=2    " faster brace match
set report=0       " report all changes
set ruler          " show position in bottom right

" STFU
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" Open folds by default
" autocmd BufWinEnter * normal zR

" Detect file changes when idle or siwtching windows
autocmd CursorHold * checktime
autocmd WinEnter * checktime

" Store swapfiles in a central location
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup

" Use , instead of \ for leader key (must be defined first)
let mapleader=','

" Fix tmux ctrl-arrows
execute "set <xUp>=\e[1;*A"
execute "set <xDown>=\e[1;*B"
execute "set <xRight>=\e[1;*C"
execute "set <xLeft>=\e[1;*D"

" }}}

" Windows and tabs {{{

" Quit vim
noremap <leader>qa <esc>:qa<cr>

" Left/right or c-h/c-l -- switch tabs
"noremap <left>  gT
"noremap <c-h>   gT
"noremap <right> gt
"noremap <c-l>   gt
"inoremap <left>  <esc>gT
"inoremap <right> <esc>gt

" Up/down -- switch windows
"noremap <down> <c-w>w
"noremap <c-j>  <c-w>w
"noremap <up>   <c-w>W
"noremap <c-k>  <c-w>W
"inoremap <down> <esc><c-w>w
"inoremap <up>   <esc><c-w>W

" Ctrl+left/right -- move tabs
"noremap <c-left>  :execute 'silent! tabmove ' . (tabpagenr()-2)<cr>
"noremap <c-right> :execute 'silent! tabmove ' . tabpagenr()<cr>

" Ctrl+up/down -- move windows
"noremap <c-down> <c-w>r
"noremap <c-up>   <c-w>R

" Ctrl+shift+left/right -- move window into new tab left or right
"map <c-s-left>  <c-w>T<c-left>
"map <c-s-right> <c-w>T<c-right>

let g:lasttab = 1
au TabLeave * let g:lasttab = tabpagenr()
nnoremap <leader>tt <esc>:exe 'tabn '.g:lasttab<cr> " Move to previous tab

" Managing tabs
noremap <leader>tn :tabnew<cr>
noremap <leader>to :tabonly<cr>
noremap <leader>tc :tabclose<cr>
noremap <leader>tf :tabnew<cr>:CtrlP<cr>
noremap <leader>ts :tab split

" Navigating windows
noremap <leader>ww <c-w>w " move below/right in a cycle
noremap <leader>wt <c-w>t " move to top/left
noremap <leader>wb <c-w>b " move to bottom/right
noremap <leader>wp <c-w>p " move to previous window
noremap <leader>wl <c-w>l " move right a window
noremap <leader>wh <c-w>h " move left a window
noremap <leader>wj <c-w>j " move down a window
noremap <leader>wk <c-w>k " move up a window

" Managing windows
noremap <leader>wt <c-w>T " move window to its own tab
noremap <leader>wn <c-w>n " create a new window with empty file
noremap <leader>ws <c-w>s " split current window
noremap <leader>wv <c-w>v " split current window vertically
noremap <leader>wq <c-w>q " quit current window
noremap <leader>wc <c-w>c " close current window
noremap <leader>wo <c-w>o " make current window only one on screen

noremap <leader>wH <c-w>H " move window to left
noremap <leader>wL <c-w>L " move window to right
noremap <leader>wJ <c-w>J " move window to bottom
noremap <leader>wK <c-w>K " move window to topw

" Edit file in current window
noremap <leader>ew :e<space>
noremap <leader>we :e<space>
" Edit file in split (horizontal)
noremap <leader>es :sp<space>
noremap <leader>se :sp<space>
" Edit file in split (vertical)
noremap <leader>ev :vsp<space>
noremap <leader>ve :vsp<space>
" Edit file new tab
noremap <leader>et :tabe<space>
noremap <leader>te :tabe<space>

" New buffer in split
nnoremap <leader>sn <esc>:below new<cr>
nnoremap <leader>vn <esc>:vert belowright new<cr>

" Merge current window ino a vert-split with prev/next tab
" (defined in ~/.vim/bundle/sbell/plugin/sbell.vim
nnoremap <leader>tj <esc>:call MoveToNextTab()<cr>
nnoremap <leader>tk <esc>:call MoveToPrevTab()<cr>

" Another shortcut for move left/right tab (for symmetry with window commands)
nnoremap <leader>th gT
nnoremap <leader>tl gt

" }}}

" Convenient commands {{{

" Make Y more consistent with C and D
call yankstack#setup()
nmap Y y$

" Move by displayed lines, not physical lines
noremap j gj
noremap k gk

" Scroll slightly faster
noremap <c-e> <c-e><c-e>
noremap <c-y> <c-y><c-y>

" Indent with tab, unindent with shift-tab
nnoremap <tab> >>
vnoremap <tab> >
nnoremap <s-tab> <<
vnoremap <s-tab> <

" Also indent with space
nnoremap <space> >>
vnoremap <space> >

" Reflow paragraph with Q in normal and visual mode
nnoremap Q gwap
vnoremap Q gw

" <F2>: enter paste mode (while in insert mode) to paste from outside vim safely
noremap <F2> :set invpaste paste?<cr>
set pastetoggle=<F2>

"" Switch CWD to the directory of the open buffer
noremap <leader>cd :cd %:p:h<cr>:pwd<cr>

" <leader>sp : toggle check Spelling
noremap <leader>sp <esc>:setlocal spell!<cr>

" // : clear search
noremap // <esc>:noh<cr>

" ctrl+s : save (you have to enable passing ctrl+s from the terminal)
nmap <c-s> <esc>:w<cr>

" :w!! : Save with sudo
cmap w!! w !sudo tee % >/dev/null

" <leader>sa : select all
nnoremap <leader>sa 1GVG

" <leader>mk : run make
noremap <leader>mk :make<cr>

" Map :W --> :w etc (caps lock errors)
command! W :w
command! Wq :wq
command! WQ :wq
command! E :e

" Quickfix window -- open/close
nnoremap <leader>qo <esc>:copen<cr>
nnoremap <leader>qc <esc>:ccl<cr>
" jump to next/previous error
nnoremap <leader>qn <esc>:cn<cr>
nnoremap <leader>qp <esc>:cn<cr>
" jump to errors in next file
nnoremap <leader>qf <esc>:cnf<cr>

" <leader>l -- lint code (format and then show errors)
"    C/C++  -- ANSI style (A1), with tabs
"    Python -- PEP8 style
"    Coffee
autocmd FileType coffee nnoremap <leader>l <esc>:CoffeeLint\|cwindow<cr>
autocmd FileType python nnoremap <leader>l <esc>:PyLintAuto<cr><esc>:PyLint<cr>
autocmd FileType c,cpp,h,hpp nnoremap <leader>l <esc>:%!astyle -A1 -t<cr>

" <leader>r -- run/compile code
"     C/C++  -- run make
"     Python -- set up by python-mode
"     Coffee -- watch live compilation
autocmd FileType c,cpp,h,hpp nnoremap <leader>r <esc>:w<cr><esc>:make<cr>
autocmd FileType coffee nnoremap <leader>r <esc>:w<cr><esc>:CoffeeCompile watch<cr>

" Save file
nnoremap <leader>sf <esc>:w<cr>

" Useful commands for vimdiff3 under git
"     diffupdate
"     get local hunk
"     get remote hunk
nnoremap <leader>du <esc>:diffupdate<cr>
nnoremap <leader>dgl <esc>:diffget LOCAL<cr>
nnoremap <leader>dgr <esc>:diffget REMOTE<cr>

" }}}

" Global fixes {{{

" Faster timeout for some actions
set timeout timeoutlen=1000 ttimeoutlen=100

" Re-adjust windows on window resize
autocmd VimResized * wincmd =

" Insert mode -- don't undo folds when typing
autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif

" Remove the toolbar if we're running under a GUI
if has("gui_running")
  set guioptions=-t
endif

" Fix backspaces
set backspace=indent,eol,start
if has('mac')
	fixdel
endif

" Backspace in normal mode
nmap <bs> X

" Jump to last known line when opening a file (change ' to ` to do column too)
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g'\"" |
  \   if foldlevel('.') > 0 |
  \     exe "normal zO" |
  \   endif |
  \ endif

" Highlight trailing whitespace in the most annoying way possible.
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/

" Delete trailing white space
fun! DeleteTrailingWS()
	exe "normal mq"
	%s/\s\+$//ge
	exe "normal `q"
	":ShowMarksClearMark
endfun
noremap <leader>dw <esc>:call DeleteTrailingWS()<cr>

" }}}

" FileType tabs, folding, wrapping {{{

" Python -- whitespace sensitive
autocmd FileType python setlocal tabstop=4 expandtab shiftwidth=4 softtabstop=4

" Latex -- 4-space tabs and 80-character hard wrapping
autocmd FileType tex setlocal expandtab shiftwidth=4 tabstop=4 textwidth=80

" Vimrc -- fold with markers
autocmd FileType vim setlocal foldmethod=marker

" Crontab -- save a backup
autocmd FileType crontab setlocal backupcopy=yes

" C/C++ -- smart indentation
" control indentation in c/c++ files with cinoptions
autocmd FileType c,cpp,h,hpp setlocal smartindent cindent cinoptions=(0,t0,+0,g0
" by default smartindent unindents lines starting with #. disable this
autocmd FileType c,cpp,h,cpp inoremap # X#

" Coffeescript -- 2-space tabs
autocmd BufNewFile,BufReadPost *.coffee setl shiftwidth=2 tabstop=2 softtabstop=2 expandtab

" Scons
au BufNewFile,BufRead SCons* set filetype=scons

" }}}

" Plugin config {{{

" Powerline -- fancy status line
set rtp+=~/term-tools/vim/bundle/powerline/powerline/bindings/vim
"let g:Powerline_symbols = 'fancy'
"let g:Powerline_stl_path_style = 'filename'
set laststatus=2  " 2 means always show status

" YankStack -- paste older items on stack
nmap <leader>p <Plug>yankstack_substitute_older_paste
nmap <leader>P <Plug>yankstack_substitute_newer_paste

" Solarized -- change some color assignments to use less eye-bleeding red
" tex : eye-bleeding red --> dark gray (note that 2 or 3 also work pretty well)
autocmd FileType tex hi Special ctermfg=10
" cpp : eye-bleeding red --> bright blue
autocmd FileType c,cpp,h,hpp hi Special ctermfg=4

" Eclim -- eclipse + vim (thanks Tim)
"   -- ctrl+space : code autocomplete
"   -- enter : search context
"   -- <leader>vc : validate c++ code
"   -- <leader>fc : find c++ tag
" Disable automatic validation (slows saves down)
set completeopt=longest,menuone
inoremap <nul> <C-x><C-u><C-n>
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<cr>"
inoremap <expr> <C-n> pumvisible() ? '<C-n>' : '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<cr>'
inoremap <expr> <M-,> pumvisible() ? '<C-n>' : '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<cr>'
nnoremap <leader>vc <esc>:Validate<cr>
nnoremap <leader>fc <esc>:CSearch<space>
let g:EclimCValidate = 0
autocmd FileType c,cpp,h,hpp nnoremap <cr> <esc>:CSearchContext<cr>zO
autocmd FileType c,cpp,h,hpp nnoremap <C-LeftMouse> <LeftMouse><esc>:CSearchContext<cr>zO

" Automatically insert C++ header gates for new h/hpp files
function! s:insert_gates()
  let gatename = '_' . substitute(toupper(substitute(expand("%:t"), "\\(\.\\)\\(\\u\\)", "\\1_\\2", "g")), "\\.", "_", "g")
  execute "normal! i#ifndef " . gatename
  execute "normal! o#define " . gatename
  execute "normal! Go#endif // " . gatename
  execute "normal! o"
  execute "normal! 2Go"
endfunction
autocmd BufNewFile *.{h,hpp} call <SID>insert_gates()

" ScmDiff -- <leader>d : inline diff with GIT version

" NERDCommenter -- use default mappings; some of them are:
"   -- <leader>ci : toggle comment
"   -- <leader>cc : comment;
"   -- <leader>cs : comment 'sexily';

" CtrlP -- searching files/buffers/tags/etc
"   -- when selecting a result:
"     -- enter: open in current window
"     -- ctrl+t: open in new ab
"     -- ctrl+v: open in vert split
"     -- ctrl+s: open in horiz split
noremap <leader>ff <esc>:CtrlP<cr>            " find file
noremap <leader>ft <esc>:CtrlPBufTagAll<cr>   " find tag
noremap <leader>fr <esc>:CtrlPMRUFiles<cr>    " find recently used file
noremap <leader>fb <esc>:CtrlPBuffer<cr>      " find buffer
noremap <leader>fq <esc>:CtrlPQuickfix<cr>    " find in quickfix
noremap <leader>fu <esc>:CtrlPUndo<cr>        " find in undo
noremap <leader>fl <esc>:CtrlPLine<cr>        " find in file (by line)

" CtrlP -- ignore files
let g:ctrlp_custom_ignore = {
	\ 'dir':  '\.git$\|\.hg$\|\.svn$',
	\ 'file': '\.exe$\|\.so$\|\.os$\|\.dll$\|\.o$\|\.d$\|\.pyc$\|\.swp$',
	\ }

" CtrlP -- only search current directory
let g:ctrlp_working_path_mode = ''

" CtrlP -- refresh file tree on write or focus change
augroup CtrlPExtension
  autocmd!
  autocmd FocusGained * ClearCtrlPCache
  autocmd BufWritePost * ClearCtrlPCache
augroup END

" TabMan -- fancy tab manager
let g:tabman_toggle = '<leader>tm'
let g:tabman_focus  = '<leader><leader>tm'

" GUndo -- <leader>u : show undo tree in right-hand window
nnoremap <leader>u :GundoToggle<cr>
let g:gundo_right = 1

" FSwitch -- <leader>h or H
"   -- <leader>h -- open in vertical split
"   -- <leader>H -- open in current window (in place of current file)
"   -- (custom wrappers I wrote in plugins/sbell.vim)
noremap <leader>h <esc>:call FSSplitSmart()<cr>
noremap <leader>H <esc>:call FSNerd(":FSHere")<cr>

" EasyMotion -- map to <leader><leader> (then the usual movement keys: w, b, f, k, j ...)
let g:EasyMotion_leader_key = '<leader><leader>'

" EasyMotion -- jump repeatedly if inside NERDTree
" (custom function in plugins/sbell.vim)
nmap <leader>j <esc>:call EMNerd(0)<cr>
nmap <leader>k <esc>:call EMNerd(1)<cr>

" EasyMotion & Solarized fix
hi link EasyMotionTarget WarningMsg
hi link EasyMotionShade Normal

" TagBar -- ctags on right (mnemonic: tagBar)
"   -- bt : toggle
"   -- bo : open
"   -- bf : find
"   -- bc : close
nnoremap <leader>bt <esc>:TagbarToggle<cr>
nnoremap <leader>bo <esc>:TagbarOpen fjc<cr>
nnoremap <leader>bf <esc>:TagbarOpen fjc<cr>2H:call EasyMotion#JK(0, 0)<cr>
nnoremap <leader>bc <esc>:TagbarClose<cr>

let g:tagbar_width = 30
let g:tagbar_sort = 0
let g:tagbar_compact = 1
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 0
let g:tagbar_foldlevel = 0
let g:tagbar_autoshowtag = 1
let g:tagbar_systemenc = 'utf-8'

" NERDTree -- file browser on left (mnemonic: All files)
"   -- ao : open
"   -- ac : close
"   -- at : toggle
"   -- af : find (custom function in plugins/sbell.vim)
noremap <leader>ao <esc>:NERDTreeFind<cr><c-w>=
noremap <leader>ac <esc>:NERDTreeClose<cr><c-w>=
noremap <leader>at <esc>:NERDTreeToggle<cr><c-w>=
noremap <leader>af <esc>:call NERDOpen()<cr>

" NERDTree -- open if no files are listed and set width to 30
autocmd vimenter * if !argc() | NERDTree | endif
let g:NERDTreeWinSize = 30

" NERDTree -- hide files
let NERDTreeIgnore=['\.swp$', '\.pyc$', '\.o$', '\.class$', '\~$']

" NERDTree -- open horiz/vert
let g:NERDTreeMapOpenSplit = 's'
let g:NERDTreeMapOpenVSplit = 'v'

" NERDTree -- I want to use C-j and C-k to jump windows, so re-map these:
let g:NERDTreeMapJumpNextSibling = 'J'
let g:NERDTreeMapJumpPrevSibling = 'K'
let g:NERDTreeMapJumpFirstChild = ''
let g:NERDTreeMapJumpLastChild = ''


" CloseTag -- close html tags automagically
autocmd FileType html,htmldjango,jinjahtml,eruby,mako let b:closetag_html_style=1
autocmd FileType html,xhtml,xml,htmldjango,jinjahtml,eruby,mako source ~/.vim/bundle/closetag/plugin/closetag.vim

" Syntastic -- inline syntax errors
let g:syntastic_enable_signs=1
"let g:syntastic_quiet_warnings=1
let g:syntastic_quiet_messages= {'level' : 'warnings'}

let g:syntastic_mode_map = { 'mode': 'active',
						   \ 'active_filetypes': [],
						   \ 'passive_filetypes': ['c', 'cpp', 'h', 'hpp'] }

" Fugutive -- git (note the other command: <leader>d for inline diff)
noremap <leader>gb <esc>:Gblame<cr>
noremap <leader>gs <esc>:Gstatus<cr>
noremap <leader>gd <esc>:Gdiff<cr>
noremap <leader>gl <esc>:Glog<cr>
noremap <leader>gc <esc>:Gcommit<cr>
noremap <leader>gp <esc>:Gpush<cr>

" Visual selection
vnoremap <silent> <leader>f :call VisualSelection('f')<cr>
vnoremap <silent> <leader>F :call VisualSelection('b')<cr>

" ShowMarks
"   -- enable with <leader>mo
"   -- close  with <leader>mc
"   -- toggle with <leader>mt
noremap <leader>mc <esc>:ShowMarksClearAll<cr>

" ShowMarks fixes
"  -- only include letters (I'm not sure what 0123456789.'`^<>[]{}()\" refers to but they
"     don't seem to match up with what ShowMarks shows in the side bar)
"  -- fix the default colors (default has foreground == background for me)
let g:showmarks_include='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
hi ShowMarksHLl ctermfg=white ctermbg=darkgray cterm=bold guifg=blue guibg=lightblue gui=bold
hi ShowMarksHLu ctermfg=white ctermbg=darkgray cterm=bold guifg=blue guibg=lightblue gui=bold
hi ShowMarksHLo ctermfg=white ctermbg=darkgray cterm=bold guifg=blue guibg=lightblue gui=bold
hi ShowMarksHLm ctermfg=white ctermbg=darkgray cterm=bold guifg=blue guibg=lightblue gui=bold

" html indentation + vim javascript
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

" Python pymode -- check for errors
"   <leader>bp -- set breakpoint
let g:pymode_rope = 0
let g:pymode_doc = 0
let g:pymode_lint_write = 0
let g:pymode_lint_onfly = 0
let g:pymode_lint_checker = "pylint,pep8,mccabe"
let g:pymode_lint_ignore = "R0912,W0511,W0702,W0704,W0622,E501,R0914,R0911"
let g:pymode_lint_jump = 0
let g:pymode_lint_on_write = 0
let g:pymode_breakpoint_key = '<leader>bp'
let g:pymode_folding = 1
let g:pymode_options_colorcolumn = 0

" Python jedi -- fancy autocomplete
"   (jedi#auto_vim_configuration sets completeopt to include a pesky window at
"   the top which I don't want)
"   <ctrl+space> or <tab> -- autocomplete
"   <enter>         -- jump to declaration
"   <leader><enter> -- jump to definition
"   <leader>rn      -- rename
"   Do not automatically pop up menu when typing dot
let g:jedi#auto_vim_configuration = 0
let g:jedi#goto_command = "<cr>"
let g:jedi#get_definition_command = "<leader><cr>"
let g:jedi#rename_command = "<leader>rn"
let g:jedi#popup_on_dot = 0

" Tell Makeshift to associate makefile as well as Makefile with
" the make command
let g:makeshift_systems = {
    \'makefile': 'make',
    \}


" }}}

" Latex plugin config {{{

" Replace latex with their math symbol
" --> see bundle/sbell/syntax/tex.vim

" Disable the <++> that normally gets inserted with this latex plugin
let g:Imap_UsePlaceHolders = 0

" Treat \ and : like a word character
" Note: if you write your \label's as \label{fig:something}, then if you
" type in \ref{fig: and press <C-n> you will automatically cycle through
" all the figure labels. Very useful!
autocmd FileType tex setlocal iskeyword+=\\
autocmd FileType tex setlocal iskeyword+=:

" BUGFIX: Vim7 has a problem detecting the filetype correctly when editing a new
" LaTex document
let g:tex_flavor='latex'

" BUGFIX: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse latex-suite. Set your grep
" program to alway generate a file-name.
set grepprg=grep\ -nH\ $*

" Stop {} and [] from using smartindent-like indentation
" Unset or set to non-zero to enable smartindent-like indentation
let g:tex_indent_brace=0

" Latex leader: use , instead of `
let g:Tex_Leader='`'

" Don't fold paragraphs or subsubsections
" (add ,subsubsection,paragraph to end of list to fold those too)
let g:Tex_FoldedSections='part,chapter,section,%%fakesection,subsection,paragraph'

" Don't fold \item
" (add item, to the start of list to fold it too)
let g:Tex_FoldedMisc='item,preamble,<<<'

" Directory to scan for latex figure images
let g:Tex_ImageDir='.'

" Don't map <c-j> to jump to next <++>
" (unfortunately we have to give it a bogus mapping)"
nnoremap <SID>I_won’t_ever_type_this <Plug>IMAP_JumpForward

" Use PDF instead of DVI by default
let g:Tex_DefaultTargetFormat='pdf'
"let g:Tex_CompileRule_pdf='rubber --pdf $*'
let g:Tex_CompileRule_pdf='make'
if has('unix') && system("uname") == "Darwin\n"  "(mac)
    let g:Tex_ViewRule_pdf='open $*.pdf'
else
	let g:Tex_ViewRule_pdf='evince'
endif

" }}}
